// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Category {
  BOOKS
  Accessories
  Collection

  Book_Online
}

model User {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String     @unique
  password String?
  image    String?
  wishlist Wishlist[]
  order    Order[]
  notes    Note[]
  posts    Post[]
  comments Comment[]
  likes    Like[]
}

model Note {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model Product {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  category      Category
  name          String
  description String @default("")
  detailedDescription String @default("")
  isFeatured    Boolean    @default(false)
  isArchived    Boolean    @default(false)
  author      String?
  currentPrice  Float
  originalPrice Float
  images        Image[]
  orderItems    OrderItem[]
  wishlist      Wishlist[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userEmail], references: [email])
  userEmail String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userEmail, productId])
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userEmail   String
  user        User        @relation(fields: [userEmail], references: [email])
  orderItems  OrderItem[] // Relation to OrderItem model
  isPaid      Boolean     @default(false)
  isDelivered Boolean     @default(false)
  phone       String      @default("")
  address     String      @default("")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  shipment Shipment[]
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  quantity  Int
  productId String  @db.ObjectId // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  items     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SaleTimer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  days      Int
  hours     Int
  minutes   Int
  seconds   Int
  isRunning Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shipment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId        String   @db.ObjectId
  order          Order    @relation(fields: [orderId], references: [id])
  status         String   @default("")
  trackingNumber String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// for the community module ; 

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  images    String[]
  likeCount Int       @default(0)
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}



model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
